@page "/barista"
@using Microsoft.AspNetCore.SignalR.Client
@using NCafe.Web.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@implements IAsyncDisposable

<PageTitle>Barista - NCafe</PageTitle>

<h2>Barista</h2>

@if (orders == null)
{
    <Spin />
}
else if (!orders.Any())
{
    <Result Title="No new orders for now." />
}
else
{
    <Card Title="New Orders">
    @foreach (var order in orders.OrderBy(o => o.OrderPlacedAt))
    {
        <CardGrid Style="width:25%">
            <h5>@order.CustomerName</h5>
            <ul>
            @foreach (var item in order.Items)
            {
                <li>@(item.Quantity)x @item.Name</li>
            }
            </ul>
            <Button Type="@ButtonType.Primary"
                Icon="@IconType.Outline.Check"
                Size="@ButtonSize.Large"
                OnClick="() => CompleteOrder(order.Id)">Complete</Button>
        </CardGrid>
    }
    </Card>
}

@code {
    private HubConnection hubConnection;
    private List<BaristaOrder> orders;

    protected override async Task OnInitializedAsync()
    {
        var url = $"{Configuration["BaristaBaseAddress"]}/orders";
        orders = await Http.GetFromJsonAsync<List<BaristaOrder>>(url);

        await StartHubAsync();
    }

    async Task CompleteOrder(Guid orderId)
    {
        var url = $"{Configuration["BaristaBaseAddress"]}/orders/prepared";
        try
        {
            var order = orders.Single(o => o.Id == orderId);
            var response = await Http.PostAsJsonAsync(url, new { OrderId = orderId });
            response.EnsureSuccessStatusCode();

            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = $"{order.CustomerName}'s order Completed",
                    Description = $"Order completed successfully.",
                    NotificationType = NotificationType.Success
                });

            orders.Remove(order);

            StateHasChanged();
        }
        catch
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to complete the order.",
                    NotificationType = NotificationType.Error
                });
        }
    }

    private async Task StartHubAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Configuration["BaristaBaseAddress"]}/orderHub")
            .Build();

        hubConnection.On<NCafe.Shared.Hubs.Order>("ReceiveOrder", order =>
        {
            orders?.Add(new BaristaOrder(
                order.Id,
                order.Customer,
                order.OrderItems.Select(i => new BaristaOrderItem(i.Name, i.Quantity)).ToArray(),
                order.OrderPlacedAt));
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
